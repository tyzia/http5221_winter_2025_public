





Plan



git cherry-pick
Accessibility
Headings
Semantics
Semantic elements
img





























Let's revisit some shorthand commands:


> git checkout -b branchName

A shor way to create new branch
and switch to it.







> git add .

A short way to say:
"add all changes"






> git commit -m "Commit description"

A short way to create commit
with description.







> git commit -am "Commit description"

A short way to add all files and commit.










Your usual git flow is:

> git clone <url>
> cd cloned-repo
> git checkout -b solution
> git add .
> git commit -m "My solution"
> git push origin solution
Create PR on github.com












git cherry-pick

This command will copy a commit.


Demo (terminal) How to copy commit from
one branch into another:

> mkdir 1
> cd 1
> git init
> vim index.html i hello world :x
> git add .
> git commit -m "Create index.html"
> git checkout -b feature
> vim index.html i all the best :x
> git commit -am "Add all the best"
> git log --oneline (to see all commits)
> git checkout main
> git log --oneline
> vim index.html (to see that there is no 'all the best')
> git cherry-pick <commit hash>
> git log --oneline (now we see the commit)
> vim index.html

















Accessibility

















1 of 5 Canadians has some sort of disability

https://www150.statcan.gc.ca/n1/pub/11-627-m/11-627-m2022062-eng.htm















Example: Disabilities-poster.png









The goal:

All people/users should have equal
access to your content.





















How to make your code accessible?


1) Semantic elements

2) Correct heading structure

3) ARIA












Headings





<h1>
<h2>
<h3>
<h4>
<h5>
<h6>









<h1>
Heading level 1


The main heading of the page/document.
Should describe the main idea or purpose
of the whole document.
It is the most important heading on the page.
Ideally there should be only one <h1> on a page.







<h2>
<h3>
<h4>
<h5>
<h6>
Headings level 2-6

Are used as titles for sections or subtopics
that fall under the main theme.
These provide structure to the content and
help break the page into logical parts.











Headings define page's structure and hierarchy.

Usual page structure is:


Main title (H1)
|.. Subtitle 1 (H2)
|.. Subtitle 2 (H2)
|..|.. Sub subtitle 2.1 (H3)
|..|.. Sub subtitle 2.2 (H3)
|..|..|.. Sub sub subtitle 2.2.1 (H4)
|..|.. Sub sub title 2.3 (H3)
|.. Subtitle 3 (H2)




H1
|.. H2
|.. H2
|..|.. H3
|..|.. H3
|..|..|.. H4
|..|.. H3
|.. H2














How to create perfect Heading structure?

1) Only one <h1> heading.
2) Avoid skipping heading levels.


Bad:

H1 - H3 - H4
H1 - H2 - H3 - H1
H2 - H1 - H3 - H4
H2 - H2 - H3

Good:

H1 - H2 - H3 - H4









Example (h1.png)

A page about Web Development Courses for Beginners

Bad h1:

<h1>Welcome to our website</h1>

Good h1:

<h1>Web Development Courses for Beginners</h1>



















Example h2:

<body>
  <h1>Web Development Resources for Beginners</h1>
  <p>Learn the basics of HTML, CSS, and JavaScript.</p>

  <h2>HTML Courses</h2>
  <p>Explore a variety of beginner-friendly courses.</p>

  <h2>CSS Courses</h2>
  <p>Courses that help you build foundational skills in CSS.</p>

  <h2>Intro to JavaScript</h2>
  <p>Start learning JavaScript through interactive lessons.</p>
</body>












Example h3, h4:

<body>
  <h1>Web Development Resources for Beginners</h1>
  <p>Learn the basics of HTML, CSS, and JavaScript.</p>
  <section>
    <h2>HTML Courses</h2>
    <p>Explore a variety of beginner...</p>

    <h3>Basic HTML for Beginners</h3>
    <p>This course covers the fundamentals...</p>

    <h4>Course Topics:</h4>
    <ul><li>Introduction to HTML</li>
    <li>Common HTML tags</li></ul>

    <h3>Advanced HTML Techniques</h3>
    <p>This course dives into...</p>
  </section>
</body>












Visual design of your headings
may not match their semantic meaning.


For example,
You have main heading and second heading.
You want your second heading
on your page look larger than the main.

Don't create H2 - H1.
Don't use <h1> just because it will
be rendered larger than the rest!

Create H1 - H2 html structure.
Apply css to your h1 to look smaller.
Apply css to your h2 to look larger.







Example headings.html












Semantics


- In HTML, semantics refers to the use of HTML elements
that convey meaning about the content they enclose.

- These elements are used to structure a web page in a way
that is both meaningful to humans and machines
(search engines & screen readers).









For example





This element is extensively used in HTML

A generic container or 'division':




<div>










Question - what type of information is inside of this div?



<div> This is navigation of my website </div>










Slightly improved version of div with id:


<div id="navigation"> This is navigation of my website </div>











Before semantics appeared, if developers wanted to
convey meaning through <div> element, they would add id:



<div id="header">

<div id="nav">

<div id="main">

<div id="section">

<div id="footer">









Once semantics were introduces, now we have
semantic elements for the same purposes:




<header>

<nav>

<main>

<section>

<footer>











Example


Bad:

<div id="navigation"> navigation content </div>

Good:

<nav> navigation content </nav>








Benefits of semantic elements:

- Improves accessibility for screen readers and other assistive technologies.
- Helps search engines better understand content (SEO benefits).
- Enhances code readability and maintainability.


More about semantic elements:
https://www.w3schools.com/html/html5_semantic_elements.asp












Semantic elements




<section>

Defines a section on a page.
Typically, has a heading and content.




<section>
    <h1>Lorem ipsum</h1>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
</section>













<article>

Specifies independent content.
Should make sense on its own.
You can remove it from the context of the website.

Example:

- Forum or blog post
- User comment
- Newspaper article



<article>
    <h2>Google Chrome</h2>
    <p>Google Chrome is a web browser developed by Google...</p>
</article>















<main>

Defines main content of the page.
The content inside should be unique.
Should not contain repeated elements appearing on each page:

- sidebars
- navigation links
- site logo
- copyright


<main>
  <h1>Most Popular Browsers</h1>
  <p>Chrome, Firefox, and Edge are the most used browsers today.</p>

  <article>
    <h2>Google Chrome</h2>
    <p>Google Chrome is a web browser developed by Google,
     released in 2008. Chrome is the world's most popular
     web browser today!</p>
  </article>

  <article> ... </article>
  <article> ... </article>
</main>







<header>





Represents intro content or navigation links.
Typically, has heading element (h1, h2, h3, etc), logo, author info.


<article>
  <header>
    <h1>What Do You Do?</h1>
    <p>My mission:</p>
  </header>
  <p>My mission is to stop the degradation of our planet's natural environment,
  and build a future in which humans live in harmony with nature.</p>
</article>










<footer>

Defines footer for the page or section.
Typically, has author info, copyright, contact.


<footer>
  <p>Author: Andrei Navumau</p>
  <p><a href="mailto:andrei.navumau@humber.ca">email me</a></p>
</footer>












<nav>

Defines set of navigation links.


<nav>
  <a href="/html/">HTML</a> |
  <a href="/css/">CSS</a> |
  <a href="/js/">JavaScript</a> |
  <a href="/jquery/">jQuery</a>
</nav>


















Important to remember:
you can nest semantic elements inside each other.










Sample structure of a page
with semantic elements:




<body>
<main>
    <h1>Main title</h1>
    <header>
        <nav>
            ... navigation links ...
        </nav>
    </header>

    <section> (or <article>)
        <header>
            <h2> Sub title </h2>
            ... some header content ...
        </header>

        <article> (or <section>)
            <h3> Sub section title </h3>
            ... content ...
        </article>

        ... more nested articles/sections ....

    </section>

    <footer>
        <p> Copyright </p>
        <nav>
            ... navigation links ...
        </nav>
    </footer>
</main>
</body>















Let's practice









Make code below semantically correct:

---

<div>
    <p>About my features</p>
    <div>
        <p>
            Main Feature<br><br>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        </p>
    </div>
    <div>
        <p>
            Second Feature<br><br>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        </p>
    </div>
    <div>
        <p>
            Last Feature<br><br>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        </p>
    </div>
</div>

---
















Is it semantic?

<img>


















No.

It embeds the image, but it doesn't
provide meaning about the image itself.









What is displayed on this image?

<img src="aaaaa.png">











This code has two problems:

1) It is not accessible.
2) It is not a valid HTML (https://validator.w3.org/nu/#textarea)

















To make <img> accessible and to fix HTML - add alt text:


<img src="aaaaa.png" alt="A group photo of our
marketing team in front of the office building">









Best practice creating a good alt text:

1) Be descriptive but concise.
2) Avoid Redundancy.
3) Don't use 'picture' or 'image'.
4) Take context into account.
5) Summarize key message for complex images.
6) Consider the userâ€™s perspective.






Examples

*all images are courtesy of shutterstock.com.






1) Be descriptive but concise.

The text should clearly describe the content.
Avoid overly long descriptions.
Focus on what is important.


Example:

Image (1.png): A photo of a red apple on a white plate.






Bad alt:

"A close-up image of a fresh red apple
sitting on a pristine white ceramic plate,
slightly tilted, with a glossy surface
that reflects light"


Good alt:

"Red apple on a white plate"










2) Avoid Redundancy

Don't repeat information that is already in the surrounding text.







For example,

Image (2.png): A chart showing sales decrease
with a heading "Sales Decrease in 2024".


<h2>Sales Decrease in 2024</h2>
<img src="2.png">


Bad alt:

"A bar chart showing sales decrease
over the past year for the year 2024"

Good alt:

"Bar chart showing sales decrease
over the past year"











3) Don't use 'picture' or 'image'.

It is redundant to say 'image' in alt text.
Screen readers already know it is an image.










For example,

Image (3.png): A photo of a sunset.


Bad alt:

"Image of a sunset over the ocean"

Good alt:

"Sunset over the ocean with vibrant
orange and red colors"











4) Take context into account.

Consider the context in which the image is used.
The purpose of the image might change depending on its context.
Provide alt text that reflects the role the image plays on the page.










Example:

Image (4.png): A logo of a company used as a link to the homepage.


Bad alt:

"Logo"

Good alt:

"Company logo, link to homepage"









5) Summarize key message for complex images

For more complex images like graphs, diagrams, or infographics,
the alt text should summarize the key message or takeaways.








Example:

Image (5.png): A pie chart showing market share distribution.

Bad alt:

"Pie chart"

Good alt:

"Pie chart showing market share:
30% for North America, 20% for Europe, 25% for Asia,
and the rest of the world"











6) Consider the userâ€™s perspective

What they would need to understand from the image?
If the image conveys information, ask yourself
what information is crucial for the user to know.









Example:

Image (6.png): A smiling person shaking hands with another person.

Bad alt:

"Two people shaking hands"

Good alt:

"Two colleagues shaking hands in a professional setting"












When alt text can be empty?







Example (button_with_icon.png)



<button>
  Subscribe
  <img src="bell.png" alt="">
</button>


When image is purely decorative we don't need alt.
According to HTML standard 'alt' attribute must be
present in <img>, for this reason we add empty alt.


























To sum up:

- Always use appropriate semantic elements.
- Ensure heading are used logically and according to hierarchy








Demo example.html





